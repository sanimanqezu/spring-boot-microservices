openapi: 3.0.0

info:
  title: Orders API
  version: 1.0.0 Beta
  description: Orders API, implemented with OpenAPI Codegen

paths:
  /orders:
    post:
      summary: add an order
      operationId: addOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '201':
          description: Order added successfully

    get:
      summary: Retrieves all orders available
      operationId: getAllOrders
      responses:
        '200':
          description: Retrieve success response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDTO'
        '404':
          description: No order was found

  /orders/orderNumber:
    get:
      summary: Retrieve order by order number
      operationId: getOrderByNumber
      parameters:
        - name: orderNumber
          in: query
          description: Order number of an order to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Retrieve success response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDTO'
        '404':
          description: Order not found

  /orders/quantity:
    get:
      summary: Retrieve orders by quantity
      operationId: getOrderByQuantity
      parameters:
        - name: quantity
          in: query
          description: quantity of orders to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Retrieve success response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDTO'
        '404':
          description: Order not found

  /orders/orderer:
    get:
      summary: Get orders by orderer identity number
      operationId: getOrderByOrdererIdNo
      parameters:
        - in: query
          name: ordererIdNo
          schema:
            type: string
          required: true
          description: Identity number of the orderer to search orders for
      responses:
        '200':
          description: An order matching the identity number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '404':
          description: No orders found for the provided orderer id number

  /orders/id:
    get:
      summary: Retrieve order by id
      operationId: getOrderById
      parameters:
        - name: id
          in: query
          description: id of an order to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Retrieve success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '404':
          description: Order not found

    delete:
      summary: Remove order by id
      operationId: removeOrderById
      parameters:
        - name: id
          in: query
          description: id of a order to remove
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order removed successfully
        '404':
          description: Order not found

    put:
      summary: update an order by id
      operationId: updateOrderById
      parameters:
        - name: id
          in: query
          description: id of a order to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '200':
          description: Order updated successfully
        '404':
          description: Order not found

  /orders/search:
    get:
      summary: Retrieves Order by search
      operationId: searchOrders
      parameters:
        - name: id
          in: query
          description: id of a Order to search
          required: false
          schema:
            type: string
            format: uuid
        - name: orderNumber
          in: query
          description: Order number of an order to search
          required: false
          schema:
            type: string
        - name: quantity
          in: query
          description: quantity of an order to search
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Order query successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDTO'
        '404':
          description: Order not found

components:
  schemas:
    OrderDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          required: false
        orderNumber:
          type: string
        ordererFullName:
          type: string
        ordererIdNo:
          type: string
        quantity:
          type: integer
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDTO'

    OrderItemDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          required: false
        productName:
          type: string
        quantity:
          type: integer

    ProductDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          required: false
        productName:
          type: string
        productNumber:
          type: string
        quantity:
          type: integer
        expirationDate:
          type: string
          format: date-time

    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          required: false
        firstName:
          type: string
        lastName:
          type: string
        rsaId:
          type: string
        dateOfBirth:
          type: date
          example: "2000-01-01"
        address:
          $ref: '#/components/schemas/AddressDTO'

    AddressDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          required: false
        city:
          type: string
        streetName:
          type: string
        houseNumber:
          type: string
        zipCode:
          type: string